

# This file was *autogenerated* from the file tester.sage
from sage.all_cmdline import *   # import sage library

_sage_const_5 = Integer(5); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
# Preliminaries

# Field and general linear group
q = _sage_const_5 
K = GF(q)
G = GL(_sage_const_2 , K)

# Borel subgroup
a = K.zeta()
MS = MatrixSpace(K, _sage_const_2 )
gens = [MS([[_sage_const_1 ,_sage_const_1 ],[_sage_const_0 ,_sage_const_1 ]]),MS([[a,_sage_const_0 ],[_sage_const_0 ,_sage_const_1 ]]), MS([[_sage_const_1 ,_sage_const_0 ],[_sage_const_0 ,a]])]
B = G.subgroup(gens)

# Creating vector space for induced rep
V = VectorSpace(CC, q+_sage_const_1 )






# Takes in character of B and returns if the induced representation is irreducible or not
def isInducedIrreducible(chi):
    induced_chi = chi.induct(G)
    return induced_chi.is_irreducible()


ct = B.character_table()
#print(ct)
chars = []
IIChars = []
for i in range(_sage_const_0 , len(B.conjugacy_classes_representatives())):
    if ct[i][_sage_const_0 ] == _sage_const_1 :
        chars.append(B.character(ct[i]))
        if isInducedIrreducible(B.character(ct[i])):
            IIChars.append(B.character(ct[i]))


chi = IIChars[_sage_const_0 ]




# First q spots counting up from 0 to q-1
# Last spot (index q) is w
cosetReps = []
for i in range(_sage_const_0 , q):
    cosetReps.append(G(MS([[_sage_const_1 ,_sage_const_0 ],[i,_sage_const_1 ]])).inverse())
    #print(cosetReps[i])
cosetReps.append(G(MS([[_sage_const_0 ,_sage_const_1 ],[_sage_const_1 ,_sage_const_0 ]])).inverse())
#print(cosetReps[q])




# Takes in element g from G and returns the corresponding representative in B\G
def toRepresentative(g):
    if g.inverse().matrix()[_sage_const_0 ][_sage_const_0 ] == _sage_const_0 :
        return G(MS([[_sage_const_0 ,_sage_const_1 ],[_sage_const_1 ,_sage_const_0 ]])).inverse()
    else:
        x = (_sage_const_1  / g.inverse().matrix()[_sage_const_0 ][_sage_const_0 ]) * g.inverse().matrix()[_sage_const_1 ][_sage_const_0 ]
        return G(MS([[_sage_const_1 ,_sage_const_0 ],[x,_sage_const_1 ]])).inverse()


# Gives the G action result of group element g from G onto vector v from V
def gAction(g, vec):
    newVec = V([_sage_const_0 ] * (q+_sage_const_1 ))
    for i in range(_sage_const_0 , q+_sage_const_1 ):
        newRep = toRepresentative(cosetReps[i] * g.inverse())
        b = cosetReps[i] * g.inverse() * newRep.inverse()
        newIndex = -_sage_const_1 

        for j in range(_sage_const_0 , q+_sage_const_1 ):
            if newRep == cosetReps[j]:
                newIndex = j
                break
        
        newVec[newIndex] = chi(b.inverse()) * vec[i]

    return newVec


# Takes naive inner product (built in dot product) and computes the averaged dot product (invariant under g action on both vectors)
def innerProduct(vec1, vec2):
    sol = _sage_const_0 
    for elem in G.list():
        temp = (gAction(elem, vec1)).dot_product(gAction(elem, vec2))
        #print(elem)
        #print(temp)
        sol = sol + temp
    sol = sol / G.order()
    return round(sol.real(), _sage_const_5 ) + round(sol.imag(), _sage_const_5 ) * I
# Highly inefficient - q^6 runtime, figure out how to somehow iterate only through cosets???


# Generates the matrix of coefficients (idk actual name of this) given g
def bigMatrix(g):
    M = matrix(CC, q+_sage_const_1 , q+_sage_const_1 , _sage_const_0 )
    for i in range(_sage_const_0 , q+_sage_const_1 ):
        for j in range(_sage_const_0 , q+_sage_const_1 ):
            vec1 = V([_sage_const_0 ]*(q+_sage_const_1 ))
            vec2 = V([_sage_const_0 ]*(q+_sage_const_1 ))
            vec1[i] = _sage_const_1 
            vec2[j] = _sage_const_1 

            M[i, j] = innerProduct(gAction(g, vec1), vec2)
            print("Filled in entry in row " + str(i) + " and column " + str(j))
    return M
# Runs in q^8 time :(











#g = G.random_element()
#vec = V([1, 2, 3, 4 + 5*I, -2, 10])
#print(gAction(g, vec))

#vec1 = V([1, 0, 3, 4])
#vec2 = V([2, 2, 1, 0])
vec1 = V.random_element()
vec2 = V.random_element()
print(vec1)
print(vec2)
x = innerProduct(vec1, vec2)
print(x)
#y = innerProduct(gAction(g, vec1), gAction(g, vec2))
#print(y)

#print(g)
#print(g.inverse())
#print(gAction(g, vec1))


g = G.random_element()
M = bigMatrix(g)
print(M)

