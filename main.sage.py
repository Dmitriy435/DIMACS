

# This file was *autogenerated* from the file main.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_15 = Integer(15)
# Preliminaries

# Field and general linear group
q = _sage_const_4 
K = GF(q)
G = GL(_sage_const_2 , K)

# Borel subgroup
a = K.zeta()
MS = MatrixSpace(K, _sage_const_2 )
gens = [MS([[_sage_const_1 ,_sage_const_1 ],[_sage_const_0 ,_sage_const_1 ]]),MS([[a,_sage_const_0 ],[_sage_const_0 ,_sage_const_1 ]]), MS([[_sage_const_1 ,_sage_const_0 ],[_sage_const_0 ,a]])]
B = G.subgroup(gens)

# Creating vector space for induced rep
V = VectorSpace(CC, q+_sage_const_1 )

# The chosen coset representations 
# First q spots are of the form [[1, 0][-i, 1]] (i counts up from 0 to q-1)
# Last spot (index q) is w
cosetReps = []
repToIndex = {}
index = _sage_const_0 
for x in K:
    rep = G(MS([[_sage_const_1 ,_sage_const_0 ],[-x,_sage_const_1 ]]))
    cosetReps.append(rep)
    repToIndex[rep] = index
    #print(rep)
    index = index + _sage_const_1 
rep = G(MS([[_sage_const_0 ,_sage_const_1 ],[_sage_const_1 ,_sage_const_0 ]]))
cosetReps.append(rep)
repToIndex[rep] = q
#print(cosetReps[q])










# Takes in character of B and returns if the induced representation is irreducible or not
def isInducedIrreducible(chi):
    induced_chi = chi.induct(G)
    return induced_chi.is_irreducible()
ct = B.character_table()
print(ct)
badChars = []
goodChars = []
for i in range(_sage_const_0 , len(B.conjugacy_classes_representatives())):
    if ct[i][_sage_const_0 ] == _sage_const_1 :
        if isInducedIrreducible(B.character(ct[i])):
            goodChars.append(B.character(ct[i]))
        else:
            badChars.append(B.character(ct[i]))
chi = goodChars[_sage_const_0 ]
print(chi.values())
print(len(goodChars))
print(len(badChars))









# Takes in element g from G and returns the corresponding representative in B\G
def toRepresentative(g):
    if g.inverse().matrix()[_sage_const_0 ][_sage_const_0 ] == _sage_const_0 :
        return G(MS([[_sage_const_0 ,_sage_const_1 ],[_sage_const_1 ,_sage_const_0 ]])).inverse()
    else:
        x = (K.one() / g.inverse().matrix()[_sage_const_0 ][_sage_const_0 ]) * g.inverse().matrix()[_sage_const_1 ][_sage_const_0 ]
        return G(MS([[_sage_const_1 ,_sage_const_0 ],[x,_sage_const_1 ]])).inverse()
# Constant time


# Gives the G action result of group element g from G onto vector v from V
# Uses globally defined character chi
# Uses globally defined vector space V
def gAction(g, vec):
    newVec = V([_sage_const_0 ] * (q+_sage_const_1 ))
    for i in range(_sage_const_0 , q+_sage_const_1 ):
        newRep = toRepresentative(cosetReps[i] * g.inverse())
        #print(newRep)
        b = cosetReps[i] * g.inverse() * newRep.inverse()
        
        newIndex = repToIndex[newRep]

        newVec[newIndex] = newVec[newIndex] + chi(b.inverse()) * vec[i]
        #print(chi(b.inverse()) * vec[i])

    return newVec
# Linear time


# Takes naive inner product (built in dot product) and computes the averaged product (invariant under g action on both vectors)
def innerProduct(vec1, vec2):
    sol = _sage_const_0 
    for elem in G: # Roughly q^4 elems
        temp = (gAction(elem, vec1)).dot_product(conjugate(gAction(elem, vec2)))
        #print(temp)
        sol = sol + temp
    sol = sol / G.order()
    return round(sol.real(), _sage_const_5 ) + round(sol.imag(), _sage_const_5 ) * I
# Highly inefficient - q^5 runtime, figure out how to somehow iterate only through cosets???


# Generates the matrix of coefficients (idk actual name of this) given element g
def bigMatrix(g):
    M = matrix(CC, q+_sage_const_1 , q+_sage_const_1 , _sage_const_0 )
    for i in range(_sage_const_0 , q+_sage_const_1 ):
        for j in range(_sage_const_0 , q+_sage_const_1 ):
            vec1 = V([_sage_const_0 ]*(q+_sage_const_1 ))
            vec2 = V([_sage_const_0 ]*(q+_sage_const_1 ))
            vec1[i] = _sage_const_1 
            vec2[j] = _sage_const_1 

            M[i, j] = innerProduct(gAction(g, vec1), vec2)
            print("Filled in entry in row " + str(i) + " and column " + str(j))
    return M
# Runs in q^7 time :(
# WARNING - even with q=5, this function takes multiple minutes to run


# Prints the matrix nicely, rounding the actual digits and displays zero as zero
def printMatrix(M):
    decimalPlaces = _sage_const_4 
    print("Printing matrix:")
    for row in M:
        for elem in row:
            temp = _sage_const_0 
            if elem != _sage_const_0 :
                temp = round(elem.real(), decimalPlaces) + round(elem.imag(), decimalPlaces) * I
            print("{:<{mx}}".format(temp, mx=_sage_const_15 ), end="\t")
        print("")
# Should automate length of mx







#vec1 = V([1, 0, 0, 0, 0])

#t1 = gAction(elem, vec1)
#print(t1)
#temp = (t1).dot_product(conjugate(t1))
#print(temp)
#vec2 = V([2, 2, 1, 0, 0])

#vec1 = V.random_element()
#vec2 = V.random_element()
#print(vec1)
#print(vec2)
#x = innerProduct(vec1, vec1)
#print(x)
#y = innerProduct(gAction(g, vec1), gAction(g, vec2))
#print(y)


#g = G.random_element()
g = G([[_sage_const_1 , _sage_const_0 ], [_sage_const_0 , _sage_const_1 ]])
M = bigMatrix(g)
printMatrix(M)

